#!/usr/bin/perl -w

use strict;
use MIME::Base64;
use File::Path qw/mkpath/;
use File::Basename qw/dirname/;

my %opt;
my %OPT = (
	-f=>sub {$opt{f} = 1;},
	-h=>sub {usage();},
);
while (my $x = shift) {
	my $fun = $OPT{$x};
	usage() unless $fun;
	$fun->();
};

local $/ = undef;

defined (my $content = <>) or die "cannot read stdin";

my @chunk = split /\[file:\s*(\S+)\s*\]/, $content;
shift @chunk;

while (@chunk) {
	my $file = urldec(shift @chunk);
	my $data = decode_base64(shift @chunk);
	
	print STDERR "\twriting file: [",length($data) ,"] $file\n";

	if (!$opt{f} && -f $file) {
		warn "file exists, skipping: $file";
		next;
	};
	mkpath(dirname($file));
	open (my $fd, ">", $file);
	print $fd $data or warn "$@";
	close $fd;
};

foreach my $file(@ARGV) {
	my $fd;
	unless (open ($fd, "<", $file)) {
		warn "cannot open: $file";
		next;
	};

	my $chunk;
	unless (defined ($chunk = <$fd>)) {
		warn "cannot read from $file";
		close $fd;
		next;
	};

	print "[file: $file]\n\n";
	print encode_base64($chunk);
	print "\n";

	close $fd;
};

sub urlenc {
	my $x = shift;
	$x =~ s:([^/\w_]):sprintf "%%%02x", ord($1):ge;
	return $x;
};

sub urldec {
	my $x = shift;
	$x =~ s:%([a-f0-9][a-f0-9]):"chr 0x$1":gee;
	return $x;
};

sub usage {
	print STDERR <<"USAGE";
Usage: $0 [options]
	decode base64 read from stdin 
	-f -- overwrite existing files (default = skip)
	-h this message
USAGE
	exit 1;
};
